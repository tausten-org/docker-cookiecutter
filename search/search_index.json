{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"docker-cookiecutter \u00b6 Table of Contents \u00b6 docker-cookiecutter Table of Contents About Getting Started Prerequisites Usage (cookiecutter) Usage (suggest) Examples Maintenance Contributing Testing CI/CD Support License Acknowledgements About \u00b6 Cookiecutter in docker with helpers for constructing / adjusting the docker commandline for execution. Getting Started \u00b6 Prerequisites \u00b6 docker (currently if you will use the suggest script's recommendation directly) *nix shell for executing docker.. otherwise, be prepared to do a bit of extra translation of the suggested commandline to its Windows equivalent Usage (cookiecutter) \u00b6 At the basic level, these are the necessary steps to leverage the container successfully. Identify the cookiecutter commandline you'd like to execute eg. cookiecutter -o /tmp/out -f https://github.com/BruceEckel/HelloCookieCutter1 Consider identify any local filesystem inputs and/or outputs the command will be using: eg. -o /tmp/out Identify the user:group you intend to manage ownership and access to these local resources eg. echo \"$(id -u):$(id -g)\" Pre-create local output target (if it doesn't already exist) eg. mkdir -p /tmp/out Prepare the docker run portion of the command execution: eg. docker run -it --rm --user \"$(id -u):$(id -g)\" --mount type=bind,source=/tmp/out,target=/tmp/out tausten/docker-cookiecutter:latest NOTE: the --user is very important in order for the output to have the correct ownership Combine the two together and execute: eg. docker run -it --rm --user \"$(id -u):$(id -g)\" --mount type=bind,source=/tmp/out,target=/tmp/out tausten/docker-cookiecutter:latest cookiecutter -o /tmp/out -f https://github.com/BruceEckel/HelloCookieCutter1 Usage (suggest) \u00b6 For help in coming up with the full docker commandline, you can lean on the suggest helper script. To use it, do the following: Come up with simplist form of your docker command to to start: eg. docker run tausten/docker-cookiecutter:latest cookiecutter -o /tmp/out -f /some/local/template Execute the suggest script with this whole simplified commandline as input: eg. docker run -it --rm tausten/docker-cookiecutter:latest suggest docker run tausten/docker-cookiecutter:latest cookiecutter -o /tmp/out -f /some/local/template Look over the suggested commandline that is returned, make any adjustments you see fit, then execute that eg. docker run -it --rm --user \"$(id -u):$(id -g)\" --mount type=bind,source=/some/local/template,target=/in --mount type=bind,source=/tmp/out,target=/out tausten/docker-cookiecutter:latest cookiecutter -o /out --overwrite-if-exists /in Examples \u00b6 Here are some simple examples based on the Cookiecutter Docs . Get cookiecutter version, help, etc...: 1 2 3 # in general, you can execute cookiecutter commands as you normally would, with the caveat that any local filesystem-based resources need special attention as described previously $ docker run -it --rm tausten/docker-cookiecutter:latest cookiecutter --version $ docker run -it --rm tausten/docker-cookiecutter:latest cookiecutter --help Simple local template example - cookiecutter cookiecutter-pypackage/ 1 2 3 4 5 6 7 # Get suggestion for how to execute your desired command $ docker run -it --rm tausten/docker-cookiecutter:latest suggest docker run tausten/docker-cookiecutter:latest cookiecutter cookiecutter-pypackage/ # Review the returned suggestion: docker run -it --rm --user \" $( id -u ) : $( id -g ) \" --mount type = bind,source = \" $( pwd ) \" /cookiecutter-pypackage/,target = /in --mount type = bind,source = \" $( pwd ) \" ,target = /out tausten/docker-cookiecutter:latest cookiecutter -o /out /in # If it looks good, go ahead and execute it.. otherwise, make your desired adjustments then proceed. Maintenance \u00b6 Preferred mode is to use VSCode + the devcontainer. Contributing \u00b6 If you're a developer, feel free to clone/fork the repo and submit PR requests. Please include at least one unit test covering the bug, and showing that your fix addresses the problem. Testing \u00b6 Testing is done with pytest, and tests are gathered under the tests folder. You can execute the tests via the makefile with make test.unit , make test.integration , or make test (which will execute any unit and integration tests). CI/CD \u00b6 This repo itself leverages github actions to perform basic CI/CD for maintainance. The repo is set up as a python (+ vscode devcontainer) development and uses pytest for testing. Support \u00b6 Please report any issues/feature requests/feedback here . Please be detailed and provide reproduction steps, examples, etc.. License \u00b6 See LICENSE for more information. Acknowledgements \u00b6 Special thanks to the maintainers of the following resources that were used during the development of docker-cookiecutter . docker - container tech cookiecutter - the excellent original project template support Python Project Wizard - a cookiecutter template for setting up python projects","title":"home"},{"location":"#docker-cookiecutter","text":"","title":"docker-cookiecutter"},{"location":"#table-of-contents","text":"docker-cookiecutter Table of Contents About Getting Started Prerequisites Usage (cookiecutter) Usage (suggest) Examples Maintenance Contributing Testing CI/CD Support License Acknowledgements","title":"Table of Contents"},{"location":"#about","text":"Cookiecutter in docker with helpers for constructing / adjusting the docker commandline for execution.","title":"About"},{"location":"#getting-started","text":"","title":"Getting Started"},{"location":"#prerequisites","text":"docker (currently if you will use the suggest script's recommendation directly) *nix shell for executing docker.. otherwise, be prepared to do a bit of extra translation of the suggested commandline to its Windows equivalent","title":"Prerequisites"},{"location":"#usage-cookiecutter","text":"At the basic level, these are the necessary steps to leverage the container successfully. Identify the cookiecutter commandline you'd like to execute eg. cookiecutter -o /tmp/out -f https://github.com/BruceEckel/HelloCookieCutter1 Consider identify any local filesystem inputs and/or outputs the command will be using: eg. -o /tmp/out Identify the user:group you intend to manage ownership and access to these local resources eg. echo \"$(id -u):$(id -g)\" Pre-create local output target (if it doesn't already exist) eg. mkdir -p /tmp/out Prepare the docker run portion of the command execution: eg. docker run -it --rm --user \"$(id -u):$(id -g)\" --mount type=bind,source=/tmp/out,target=/tmp/out tausten/docker-cookiecutter:latest NOTE: the --user is very important in order for the output to have the correct ownership Combine the two together and execute: eg. docker run -it --rm --user \"$(id -u):$(id -g)\" --mount type=bind,source=/tmp/out,target=/tmp/out tausten/docker-cookiecutter:latest cookiecutter -o /tmp/out -f https://github.com/BruceEckel/HelloCookieCutter1","title":"Usage (cookiecutter)"},{"location":"#usage-suggest","text":"For help in coming up with the full docker commandline, you can lean on the suggest helper script. To use it, do the following: Come up with simplist form of your docker command to to start: eg. docker run tausten/docker-cookiecutter:latest cookiecutter -o /tmp/out -f /some/local/template Execute the suggest script with this whole simplified commandline as input: eg. docker run -it --rm tausten/docker-cookiecutter:latest suggest docker run tausten/docker-cookiecutter:latest cookiecutter -o /tmp/out -f /some/local/template Look over the suggested commandline that is returned, make any adjustments you see fit, then execute that eg. docker run -it --rm --user \"$(id -u):$(id -g)\" --mount type=bind,source=/some/local/template,target=/in --mount type=bind,source=/tmp/out,target=/out tausten/docker-cookiecutter:latest cookiecutter -o /out --overwrite-if-exists /in","title":"Usage (suggest)"},{"location":"#examples","text":"Here are some simple examples based on the Cookiecutter Docs . Get cookiecutter version, help, etc...: 1 2 3 # in general, you can execute cookiecutter commands as you normally would, with the caveat that any local filesystem-based resources need special attention as described previously $ docker run -it --rm tausten/docker-cookiecutter:latest cookiecutter --version $ docker run -it --rm tausten/docker-cookiecutter:latest cookiecutter --help Simple local template example - cookiecutter cookiecutter-pypackage/ 1 2 3 4 5 6 7 # Get suggestion for how to execute your desired command $ docker run -it --rm tausten/docker-cookiecutter:latest suggest docker run tausten/docker-cookiecutter:latest cookiecutter cookiecutter-pypackage/ # Review the returned suggestion: docker run -it --rm --user \" $( id -u ) : $( id -g ) \" --mount type = bind,source = \" $( pwd ) \" /cookiecutter-pypackage/,target = /in --mount type = bind,source = \" $( pwd ) \" ,target = /out tausten/docker-cookiecutter:latest cookiecutter -o /out /in # If it looks good, go ahead and execute it.. otherwise, make your desired adjustments then proceed.","title":"Examples"},{"location":"#maintenance","text":"Preferred mode is to use VSCode + the devcontainer.","title":"Maintenance"},{"location":"#contributing","text":"If you're a developer, feel free to clone/fork the repo and submit PR requests. Please include at least one unit test covering the bug, and showing that your fix addresses the problem.","title":"Contributing"},{"location":"#testing","text":"Testing is done with pytest, and tests are gathered under the tests folder. You can execute the tests via the makefile with make test.unit , make test.integration , or make test (which will execute any unit and integration tests).","title":"Testing"},{"location":"#cicd","text":"This repo itself leverages github actions to perform basic CI/CD for maintainance. The repo is set up as a python (+ vscode devcontainer) development and uses pytest for testing.","title":"CI/CD"},{"location":"#support","text":"Please report any issues/feature requests/feedback here . Please be detailed and provide reproduction steps, examples, etc..","title":"Support"},{"location":"#license","text":"See LICENSE for more information.","title":"License"},{"location":"#acknowledgements","text":"Special thanks to the maintainers of the following resources that were used during the development of docker-cookiecutter . docker - container tech cookiecutter - the excellent original project template support Python Project Wizard - a cookiecutter template for setting up python projects","title":"Acknowledgements"},{"location":"api/","text":"\u00b6 Top-level package for Docker Cookiecutter. cli \u00b6 Console script for docker_cookiecutter. docker_cookiecutter \u00b6 Main module. templates \u00b6 TemplateSourceInfo dataclass \u00b6 Gather complete set of information about the template source. template - the base uri of the template (eg. directory, or repository address) checkout - [optional] - branch, tag or commit within the repo directory - [optional] - directory within the repo","title":"modules"},{"location":"api/#docker_cookiecutter","text":"Top-level package for Docker Cookiecutter.","title":"docker_cookiecutter"},{"location":"api/#docker_cookiecutter.cli","text":"Console script for docker_cookiecutter.","title":"cli"},{"location":"api/#docker_cookiecutter.docker_cookiecutter","text":"Main module.","title":"docker_cookiecutter"},{"location":"api/#docker_cookiecutter.templates","text":"","title":"templates"},{"location":"api/#docker_cookiecutter.templates.TemplateSourceInfo","text":"Gather complete set of information about the template source. template - the base uri of the template (eg. directory, or repository address) checkout - [optional] - branch, tag or commit within the repo directory - [optional] - directory within the repo","title":"TemplateSourceInfo"},{"location":"authors/","text":"Credits \u00b6 Development Lead \u00b6 Tyler Austen TylerAusten@gmail.com Contributors \u00b6 None yet. Why not be the first?","title":"authors"},{"location":"authors/#credits","text":"","title":"Credits"},{"location":"authors/#development-lead","text":"Tyler Austen TylerAusten@gmail.com","title":"Development Lead"},{"location":"authors/#contributors","text":"None yet. Why not be the first?","title":"Contributors"},{"location":"contributing/","text":"Contributing \u00b6 Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways: Types of Contributions \u00b6 Report Bugs \u00b6 Report bugs at https://github.com/tausten/docker-cookiecutter/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug. Fix Bugs \u00b6 Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it. Implement Features \u00b6 Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it. Write Documentation \u00b6 Docker Cookiecutter could always use more documentation, whether as part of the official Docker Cookiecutter docs, in docstrings, or even on the web in blog posts, articles, and such. Submit Feedback \u00b6 The best way to send feedback is to file an issue at https://github.com/tausten/docker-cookiecutter/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :) Get Started! \u00b6 Ready to contribute? Here's how to set up docker_cookiecutter for local development. Fork the docker_cookiecutter repo on GitHub. Clone your fork locally 1 $ git clone git@github.com:your_name_here/docker_cookiecutter.git Ensure poetry is installed. Install dependencies and start your virtualenv: 1 $ poetry install -E test -E doc -E dev Create a branch for local development: 1 $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: 1 $ tox Commit your changes and push your branch to GitHub: 1 2 3 $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website. Pull Request Guidelines \u00b6 Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.6, 3.7, 3.8, 3.9 and for PyPy. Check https://github.com/tausten/docker-cookiecutter/actions and make sure that the tests pass for all supported Python versions. Tips``` \u00b6 1 $ pytest tests.test_docker_cookiecutter ```To run a subset of tests. Deploying \u00b6 A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in HISTORY.md). Then run: 1 2 3 $ poetry patch # possible: major / minor / patch $ git push $ git push --tags Travis will then deploy to PyPI if tests pass.","title":"contributing"},{"location":"contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways:","title":"Contributing"},{"location":"contributing/#types-of-contributions","text":"","title":"Types of Contributions"},{"location":"contributing/#report-bugs","text":"Report bugs at https://github.com/tausten/docker-cookiecutter/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug.","title":"Report Bugs"},{"location":"contributing/#fix-bugs","text":"Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it.","title":"Fix Bugs"},{"location":"contributing/#implement-features","text":"Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.","title":"Implement Features"},{"location":"contributing/#write-documentation","text":"Docker Cookiecutter could always use more documentation, whether as part of the official Docker Cookiecutter docs, in docstrings, or even on the web in blog posts, articles, and such.","title":"Write Documentation"},{"location":"contributing/#submit-feedback","text":"The best way to send feedback is to file an issue at https://github.com/tausten/docker-cookiecutter/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :)","title":"Submit Feedback"},{"location":"contributing/#get-started","text":"Ready to contribute? Here's how to set up docker_cookiecutter for local development. Fork the docker_cookiecutter repo on GitHub. Clone your fork locally 1 $ git clone git@github.com:your_name_here/docker_cookiecutter.git Ensure poetry is installed. Install dependencies and start your virtualenv: 1 $ poetry install -E test -E doc -E dev Create a branch for local development: 1 $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: 1 $ tox Commit your changes and push your branch to GitHub: 1 2 3 $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website.","title":"Get Started!"},{"location":"contributing/#pull-request-guidelines","text":"Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.6, 3.7, 3.8, 3.9 and for PyPy. Check https://github.com/tausten/docker-cookiecutter/actions and make sure that the tests pass for all supported Python versions.","title":"Pull Request Guidelines"},{"location":"contributing/#tips","text":"1 $ pytest tests.test_docker_cookiecutter ```To run a subset of tests.","title":"Tips```"},{"location":"contributing/#deploying","text":"A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in HISTORY.md). Then run: 1 2 3 $ poetry patch # possible: major / minor / patch $ git push $ git push --tags Travis will then deploy to PyPI if tests pass.","title":"Deploying"},{"location":"history/","text":"History \u00b6 0.1.0 (2021-09-11) \u00b6 First release on PyPI.","title":"history"},{"location":"history/#history","text":"","title":"History"},{"location":"history/#010-2021-09-11","text":"First release on PyPI.","title":"0.1.0 (2021-09-11)"},{"location":"installation/","text":"Installation \u00b6 Stable release \u00b6 To install Docker Cookiecutter, run this command in your terminal: 1 pip install docker_cookiecutter This is the preferred method to install Docker Cookiecutter, as it will always install the most recent stable release. If you don't have [pip][] installed, this [Python installation guide][] can guide you through the process. From source \u00b6 The source for Docker Cookiecutter can be downloaded from the [Github repo][https://github.com/tausten/docker-cookiecutter]. You can either clone the public repository: 1 git clone git://github.com/tausten/docker-cookiecutter Or download the [tarball][ttps://github.com/tausten/docker-cookiecutter/tarball/master]: 1 curl -OJL https://github.com/tausten/docker-cookiecutter/tarball/master Once you have a copy of the source, you can install it with: 1 pip install .","title":"installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#stable-release","text":"To install Docker Cookiecutter, run this command in your terminal: 1 pip install docker_cookiecutter This is the preferred method to install Docker Cookiecutter, as it will always install the most recent stable release. If you don't have [pip][] installed, this [Python installation guide][] can guide you through the process.","title":"Stable release"},{"location":"installation/#from-source","text":"The source for Docker Cookiecutter can be downloaded from the [Github repo][https://github.com/tausten/docker-cookiecutter]. You can either clone the public repository: 1 git clone git://github.com/tausten/docker-cookiecutter Or download the [tarball][ttps://github.com/tausten/docker-cookiecutter/tarball/master]: 1 curl -OJL https://github.com/tausten/docker-cookiecutter/tarball/master Once you have a copy of the source, you can install it with: 1 pip install .","title":"From source"},{"location":"usage/","text":"Usage \u00b6 To use Docker Cookiecutter in a project 1 import docker_cookiecutter","title":"usage"},{"location":"usage/#usage","text":"To use Docker Cookiecutter in a project 1 import docker_cookiecutter","title":"Usage"}]}